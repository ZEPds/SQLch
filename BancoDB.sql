-- MySQL Script generated by MySQL Workbench
-- Sat Nov 12 15:51:29 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema DB_BANCO
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `DB_BANCO` ;

-- -----------------------------------------------------
-- Schema DB_BANCO
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `DB_BANCO` DEFAULT CHARACTER SET utf8 ;
USE `DB_BANCO` ;

-- -----------------------------------------------------
-- Table `DB_BANCO`.`Cliente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DB_BANCO`.`Cliente` (
  `id` INT NOT NULL,
  `nombre` VARCHAR(50) NULL,
  `nacimiento` DATE NULL,
  `cuenta` VARCHAR(18) NULL,
  `clave` VARCHAR(18) NULL,
  `tarjeta` VARCHAR(16) NULL,
  `celular` VARCHAR(10) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DB_BANCO`.`Bancos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DB_BANCO`.`Bancos` (
  `idBancos` INT NOT NULL,
  `nombre` VARCHAR(45) NULL,
  PRIMARY KEY (`idBancos`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DB_BANCO`.`Tipo_transaccion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DB_BANCO`.`Tipo_transaccion` (
  `idTipo` INT NOT NULL,
  `nombre` VARCHAR(45) NULL,
  PRIMARY KEY (`idTipo`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DB_BANCO`.`Estados`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DB_BANCO`.`Estados` (
  `idEstados` INT NOT NULL,
  `nombre` VARCHAR(45) NULL,
  PRIMARY KEY (`idEstados`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DB_BANCO`.`Errores`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DB_BANCO`.`Errores` (
  `idErrores` INT NOT NULL,
  `nombre` VARCHAR(45) NULL,
  PRIMARY KEY (`idErrores`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DB_BANCO`.`Transaccion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DB_BANCO`.`Transaccion` (
  `idTransaccion` INT NOT NULL,
  `idCliente` INT NULL,
  `idBanco` INT NULL,
  `monto` DECIMAL NULL,
  `tipo` INT NULL,
  `estado` INT NULL,
  `errorT` INT NULL DEFAULT NULL,
  `generada` DATE NULL,
  PRIMARY KEY (`idTransaccion`),
  INDEX `idCliente_idx` (`idCliente` ASC) VISIBLE,
  INDEX `IdBanco_idx` (`idBanco` ASC) VISIBLE,
  INDEX `tipo_idx` (`tipo` ASC) VISIBLE,
  INDEX `estado_idx` (`estado` ASC) VISIBLE,
  INDEX `error_idx` (`errorT` ASC) VISIBLE,
  CONSTRAINT `idCliente`
    FOREIGN KEY (`idCliente`)
    REFERENCES `DB_BANCO`.`Cliente` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `IdBanco`
    FOREIGN KEY (`idBanco`)
    REFERENCES `DB_BANCO`.`Bancos` (`idBancos`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `tipo`
    FOREIGN KEY (`tipo`)
    REFERENCES `DB_BANCO`.`Tipo_transaccion` (`idTipo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `estado`
    FOREIGN KEY (`estado`)
    REFERENCES `DB_BANCO`.`Estados` (`idEstados`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `error`
    FOREIGN KEY (`errorT`)
    REFERENCES `DB_BANCO`.`Errores` (`idErrores`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DB_BANCO`.`log_cliente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DB_BANCO`.`log_cliente` (
  `idlog` INT NOT NULL AUTO_INCREMENT,
  `accion` VARCHAR(45) NULL,
  `fecha` DATETIME NULL,
  PRIMARY KEY (`idlog`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DB_BANCO`.`log_transaccion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DB_BANCO`.`log_transaccion` (
  `idlog_transaccion` INT NOT NULL AUTO_INCREMENT,
  `accion` VARCHAR(45) NULL,
  `fecha` DATETIME NULL,
  PRIMARY KEY (`idlog_transaccion`))
ENGINE = InnoDB;

USE `DB_BANCO` ;

-- -----------------------------------------------------
-- procedure InsertarCliente
-- -----------------------------------------------------

DELIMITER $$
USE `DB_BANCO`$$
CREATE PROCEDURE `InsertarCliente`(id int, nombre varchar(50), nacimiento date, cuenta varchar(18),clave varchar(4), tarjeta varchar(16), celular varchar(10))
BEGIN
insert into cliente (id, nombre, nacimiento, cuenta, clave, tarjeta, celular) values (id, nombre, nacimiento, cuenta, clave, tarjeta, celular);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ProcedureOrden
-- -----------------------------------------------------

DELIMITER $$
USE `DB_BANCO`$$
CREATE PROCEDURE `ProcedureOrden`(id int, formato bool)
BEGIN
if formato = true
then select * from cliente
order by id asc;
else
select * from cliente
order by id desc;
END if;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- View `DB_BANCO`.`vwclientes`
-- -----------------------------------------------------
USE `DB_BANCO`;
CREATE  OR REPLACE VIEW vwclientes AS
select id, nombre, cuenta, nacimiento
from Cliente;

-- -----------------------------------------------------
-- View `DB_BANCO`.`vwoperacion`
-- -----------------------------------------------------
USE `DB_BANCO`;
CREATE  OR REPLACE VIEW vwoperacion AS
select idTransaccion, idCliente, idBanco, monto, tipo, estado, errorT
from Transaccion
left join Cliente on Cliente.id = Transaccion.idCliente
left join Tipo_transaccion on Tipo_transaccion.idTipo = Transaccion.tipo
left join Bancos on Bancos.idBancos = Transaccion.idBanco
left join Estados on Estados.idEstados = Transaccion.estado
left join Errores on Errores.idErrores = Transaccion.errorT
where errorT is null;

-- -----------------------------------------------------
-- View `DB_BANCO`.`vwOpError`
-- -----------------------------------------------------
USE `DB_BANCO`;
CREATE  OR REPLACE VIEW `vwOpError` AS
select idTransaccion, idCliente, idBanco, monto, tipo, estado, errorT
from Transaccion
left join Cliente on Cliente.id = Transaccion.idCliente
left join Tipo_transaccion on Tipo_transaccion.idTipo = Transaccion.tipo
left join Bancos on Bancos.idBancos = Transaccion.idBanco
left join Estados on Estados.idEstados = Transaccion.estado
left join Errores on Errores.idErrores = Transaccion.errorT
where errorT is not null;

-- -----------------------------------------------------
-- View `DB_BANCO`.`vwTarjetaClave`
-- -----------------------------------------------------
USE `DB_BANCO`;
CREATE  OR REPLACE VIEW `vwTarjetaClave` AS
select id, cuenta, tarjeta, clave
from Cliente;

-- -----------------------------------------------------
-- View `DB_BANCO`.`vwErrores`
-- -----------------------------------------------------
USE `DB_BANCO`;
CREATE  OR REPLACE VIEW `vwErrores` AS
select idErrores, nombre
from Errores;
USE `DB_BANCO`;

DELIMITER $$
USE `DB_BANCO`$$
CREATE DEFINER = CURRENT_USER TRIGGER `DB_BANCO`.`log_cliente_BEFORE_INSERT` BEFORE INSERT ON `Cliente` FOR EACH ROW
BEGIN
	insert into log_cliente (accion) value ('se actualizaron los registros');
END$$

USE `DB_BANCO`$$
CREATE DEFINER = CURRENT_USER TRIGGER `DB_BANCO`.`log_cliente_AFTER_INSERT` AFTER INSERT ON `Cliente` FOR EACH ROW
BEGIN
	insert into log_cliente (accion) value ('se creo un registro en cliente');
END$$

USE `DB_BANCO`$$
CREATE DEFINER = CURRENT_USER TRIGGER `DB_BANCO`.`log_transaccion_AFTER_INSERT` AFTER INSERT ON `Transaccion` FOR EACH ROW
BEGIN
	insert into log_transaccion (accion) value ('se creo un registro en transaccion');
END$$

USE `DB_BANCO`$$
CREATE DEFINER = CURRENT_USER TRIGGER `DB_BANCO`.`log_transaccion_BEFORE_INSERT` BEFORE INSERT ON `Transaccion` FOR EACH ROW
BEGIN
	insert into log_transaccion (accion) value ('se actualizaron los registros en transaccion');
END$$


DELIMITER ;
CREATE USER 'user1'; /* se crea el usuario1 */

GRANT SELECT ON TABLE `DB_BANCO`.* TO 'user1'; /* se le otorga permiso al usuario1 para leer las tablas de la base de datos */
CREATE USER 'user2'; /* se crea el usuario2 */

GRANT SELECT, INSERT, TRIGGER, UPDATE ON TABLE `DB_BANCO`.* TO 'user2'; /* se le otorga permiso al usuario2 para leer, modificar e insertar en todas las tablas */

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `DB_BANCO`.`Cliente`
-- -----------------------------------------------------
START TRANSACTION;
USE `DB_BANCO`;
INSERT INTO `DB_BANCO`.`Cliente` (`id`, `nombre`, `nacimiento`, `cuenta`, `clave`, `tarjeta`, `celular`) VALUES (1, 'FRANCISCO NICOLINI', '1999-12-30', '0001', '1234', '0000000000000001', '1144444444');
INSERT INTO `DB_BANCO`.`Cliente` (`id`, `nombre`, `nacimiento`, `cuenta`, `clave`, `tarjeta`, `celular`) VALUES (2, 'ROBERTO PEREZ', '1999-12-30', '0002', '3321', '0000000000000002', '1155555555');
INSERT INTO `DB_BANCO`.`Cliente` (`id`, `nombre`, `nacimiento`, `cuenta`, `clave`, `tarjeta`, `celular`) VALUES (3, 'FERNANDA LOPEZ', '1999-12-30', '0003', '5241', '0000000000000003', '1166666666');
INSERT INTO `DB_BANCO`.`Cliente` (`id`, `nombre`, `nacimiento`, `cuenta`, `clave`, `tarjeta`, `celular`) VALUES (4, 'ROMINA VEGA', '1999-12-30', '0004', '8924', '0000000000000004', '1177777777');

COMMIT;


-- -----------------------------------------------------
-- Data for table `DB_BANCO`.`Bancos`
-- -----------------------------------------------------
START TRANSACTION;
USE `DB_BANCO`;
INSERT INTO `DB_BANCO`.`Bancos` (`idBancos`, `nombre`) VALUES (1, 'BNA');
INSERT INTO `DB_BANCO`.`Bancos` (`idBancos`, `nombre`) VALUES (2, 'BBVA');
INSERT INTO `DB_BANCO`.`Bancos` (`idBancos`, `nombre`) VALUES (3, 'GALICIA');
INSERT INTO `DB_BANCO`.`Bancos` (`idBancos`, `nombre`) VALUES (4, 'PROVINCIA');
INSERT INTO `DB_BANCO`.`Bancos` (`idBancos`, `nombre`) VALUES (5, 'HSBC');

COMMIT;


-- -----------------------------------------------------
-- Data for table `DB_BANCO`.`Tipo_transaccion`
-- -----------------------------------------------------
START TRANSACTION;
USE `DB_BANCO`;
INSERT INTO `DB_BANCO`.`Tipo_transaccion` (`idTipo`, `nombre`) VALUES (1, 'SALIDA');
INSERT INTO `DB_BANCO`.`Tipo_transaccion` (`idTipo`, `nombre`) VALUES (2, 'ENTRADA');

COMMIT;


-- -----------------------------------------------------
-- Data for table `DB_BANCO`.`Estados`
-- -----------------------------------------------------
START TRANSACTION;
USE `DB_BANCO`;
INSERT INTO `DB_BANCO`.`Estados` (`idEstados`, `nombre`) VALUES (1, 'EN PROCESO');
INSERT INTO `DB_BANCO`.`Estados` (`idEstados`, `nombre`) VALUES (2, 'FINALIZADA');
INSERT INTO `DB_BANCO`.`Estados` (`idEstados`, `nombre`) VALUES (3, 'CANCELADA');
INSERT INTO `DB_BANCO`.`Estados` (`idEstados`, `nombre`) VALUES (4, 'DEVUELTA');
INSERT INTO `DB_BANCO`.`Estados` (`idEstados`, `nombre`) VALUES (5, 'ERROR');

COMMIT;


-- -----------------------------------------------------
-- Data for table `DB_BANCO`.`Errores`
-- -----------------------------------------------------
START TRANSACTION;
USE `DB_BANCO`;
INSERT INTO `DB_BANCO`.`Errores` (`idErrores`, `nombre`) VALUES (1, 'SALDO INSUFICIENTE');
INSERT INTO `DB_BANCO`.`Errores` (`idErrores`, `nombre`) VALUES (2, 'CUENTA DESTINO INEXISTENTE');
INSERT INTO `DB_BANCO`.`Errores` (`idErrores`, `nombre`) VALUES (3, 'PROBLEMA EN LA RED');

COMMIT;


-- -----------------------------------------------------
-- Data for table `DB_BANCO`.`Transaccion`
-- -----------------------------------------------------
START TRANSACTION;
USE `DB_BANCO`;
INSERT INTO `DB_BANCO`.`Transaccion` (`idTransaccion`, `idCliente`, `idBanco`, `monto`, `tipo`, `estado`, `errorT`, `generada`) VALUES (1, 1, 3, 1500, 1, 2, NULL, '2022-10-05');
INSERT INTO `DB_BANCO`.`Transaccion` (`idTransaccion`, `idCliente`, `idBanco`, `monto`, `tipo`, `estado`, `errorT`, `generada`) VALUES (2, 1, 2, 300, 2, 5, 3, '2022-08-03');
INSERT INTO `DB_BANCO`.`Transaccion` (`idTransaccion`, `idCliente`, `idBanco`, `monto`, `tipo`, `estado`, `errorT`, `generada`) VALUES (3, 3, 1, 500, 1, 1, NULL, '2022-08-06');
INSERT INTO `DB_BANCO`.`Transaccion` (`idTransaccion`, `idCliente`, `idBanco`, `monto`, `tipo`, `estado`, `errorT`, `generada`) VALUES (4, 4, 4, 300, 1, 5, 1, '2022-01-12');

COMMIT;

